#include <iostream>
using namespace std;

// Node class for the Binary Search Tree (BST)
class TNode {
public:
    int data;
    TNode* left;
    TNode* right;

    TNode() // Default constructor
    {
        data = 0;
        left = nullptr;
        right = nullptr;
    }

    TNode(int value) // Parameterized constructor
    {
        data = value;
        left = nullptr;
        right = nullptr;
    }
};

// Binary Search Tree class
class BST {
public:
    TNode* root;

    BST(); // Constructor
    void insert(TNode* node, int value); // Insert a node
    bool search(TNode* node, int value); // Search for a node
    TNode* findmin(TNode* node); // Find the minimum value in a subtree
    TNode* getParent(TNode* node, int value); // Find the parent of a given node
    void delete_node(TNode*& node, int value); // Delete a node by value
    bool isEmpty(); // Check if the BST is empty
    void in_orderTraverse(TNode* node); // In-order traversal (ascending order)
};

// Constructor for BST
BST::BST()
{
    root = nullptr;
}

// Insert a node into the BST
void BST::insert(TNode* node, int value)
{
    if (root == nullptr) {
        root = new TNode(value);
        return;
    }
    if (value < node->data) {
        if (node->left == nullptr) {
            node->left = new TNode(value);
        }
        else {
            insert(node->left, value);
        }
    }
    else {
        if (node->right == nullptr) {
            node->right = new TNode(value);
        }
        else {
            insert(node->right, value);
        }
    }
}

// Search for a node in the BST
bool BST::search(TNode* node, int value)
{
    if (node == nullptr) return false;
    if (node->data == value) return true;
    if (value < node->data) return search(node->left, value);
    return search(node->right, value);
}

// Find the minimum value in a subtree
TNode* BST::findmin(TNode* node)
{
    while (node && node->left != nullptr) {
        node = node->left;
    }
    return node;
}

// Get the parent of a node
TNode* BST::getParent(TNode* node, int value)
{
    if (node == nullptr || node->data == value) return nullptr;
    if ((node->left && node->left->data == value) || (node->right && node->right->data == value)) {
        return node;
    }
    if (value < node->data) return getParent(node->left, value);
    return getParent(node->right, value);
}

// Delete a node from the BST
void BST::delete_node(TNode*& node, int value)
{
    if (node == nullptr) return;

    if (value < node->data) {
        delete_node(node->left, value);
    }
    else if (value > node->data) {
        delete_node(node->right, value);
    }
    else {
        // Node with one or no children
        if (node->left == nullptr) {
            TNode* temp = node->right;
            delete node;
            node = temp;
        }
        else if (node->right == nullptr) {
            TNode* temp = node->left;
            delete node;
            node = temp;
        }
        else {
            // Node with two children
            TNode* temp = findmin(node->right);
            node->data = temp->data;
            delete_node(node->right, temp->data);
        }
    }
}

// Check if the BST is empty
bool BST::isEmpty()
{
    return root == nullptr;
}

// In-order traversal (ascending order)
void BST::in_orderTraverse(TNode* node)
{
    if (node == nullptr) return;
    in_orderTraverse(node->left);
    cout << node->data << " ";
    in_orderTraverse(node->right);
}

// Main function to test the implementation
int main()
{
    BST tree;

    // Insert nodes into the BST
    tree.insert(tree.root, 50);
    tree.insert(tree.root, 30);
    tree.insert(tree.root, 70);
    tree.insert(tree.root, 20);
    tree.insert(tree.root, 40);
    tree.insert(tree.root, 60);
    tree.insert(tree.root, 80);

    // In-order traversal
    cout << "In-order Traversal: ";
    tree.in_orderTraverse(tree.root);
    cout << endl;

    // Search for a value
    int searchValue = 40;
    cout << "Searching for " << searchValue << ": " << (tree.search(tree.root, searchValue) ? "Found" : "Not Found") << endl;

    // Delete a node
    int deleteValue = 30;
    cout << "Deleting " << deleteValue << " from the BST." << endl;
    tree.delete_node(tree.root, deleteValue);

    // In-order traversal after deletion
    cout << "In-order Traversal after Deletion: ";
    tree.in_orderTraverse(tree.root);
    cout << endl;

    return 0;
}
